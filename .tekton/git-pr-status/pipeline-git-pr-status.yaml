---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-git-pr-status
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: the branch for the git repo
    - name: pr-repository
      description: The source git repo for the PullRequest
      default: ""
    - name: pr-branch
      description: The source branch for the PullRequest
      default: ""
    - name: pr-revision
      description: the commit id/sha for the PullRequest
      default: ""
    - name: git-access-token
      description: the token to access the git repository for the clone operations
      default: ""
    - name: properties-file
      default: "output/thebuild.properties"
    - name: git-credentials-json-file
      default: "output/secrets/thecredentials.json"
    - name: context
      default: "commit message check"
    - name: description
      default: "verify the commit message"
    - name: pipeline-debug
      default: "0"
    - name: directory-name
      default: "."
    - name: ssh_keys
      default: ""
      description: List of names of the SSH keys that is configured in your IBM Cloud account, used to establish a connection to the IBM Cloud HPC bastion and login node. Ensure that the SSH key is present in the same resource group and region where the cluster is being provisioned. If you do not have an SSH key in your IBM Cloud account, create one by according to [SSH Keys](https://cloud.ibm.com/docs/vpc?topic=vpc-ssh-keys).
    - name: zones
      default: ""
      description: IBM Cloud zone names within the selected region where the IBM Cloud HPC cluster should be deployed. Two zone names are required as input value and supported zones for eu-de are eu-de-2, eu-de-3 and for us-east us-east-1, us-east-3. The management nodes and file storage shares will be deployed to the first zone in the list. Compute nodes will be deployed across both first and second zones, where the first zone in the list will be considered as the most preferred zone for compute nodes deployment. [Learn more](https://cloud.ibm.com/docs/vpc?topic=vpc-creating-a-vpc-in-a-different-region#get-zones-using-the-cli).
    - name: cluster_prefix
      description: Prefix that is used to name the IBM Cloud HPC cluster and IBM Cloud resources that are provisioned to build the IBM Cloud HPC cluster instance. You cannot create more than one instance of the IBM Cloud HPC cluster with the same name. Ensure that the name is unique.
      default: cicd-wes
    - name: resource_group
      description: Resource group name from your IBM Cloud account where the VPC resources should be deployed. Note. If the resource group value is set as null, automation creates two different RG with the name (workload-rg and service-rg). For additional information on resource groups, see [Managing resource groups](https://cloud.ibm.com/docs/account?topic=account-rgs).
      default: Default
    - name: remote_allowed_ips
      default: ""
      description: Comma-separated list of IP addresses that can access the IBM Cloud HPC cluster instance through an SSH interface. For security purposes, provide the public IP addresses assigned to the devices that are authorized to establish SSH connections (for example, [\"169.45.117.34\"]). To fetch the IP address of the device, use [https://ipv4.icanhazip.com/](https://ipv4.icanhazip.com/).
    - name: compute_image_name_rhel
      description: Name of the custom image that you want to use to create virtual server instances in your IBM Cloud account to deploy the IBM Cloud HPC cluster dynamic compute nodes. By default, the solution uses a RHEL 8-6 OS image with additional software packages mentioned [here](https://cloud.ibm.com/docs/hpc-spectrum-LSF#create-custom-image). The solution also offers, Ubuntu 22-04 OS base image (hpcaas-lsf10-ubuntu2204-compute-v1). If you would like to include your application-specific binary files, follow the instructions in [ Planning for custom images ](https://cloud.ibm.com/docs/vpc?topic=vpc-planning-custom-images) to create your own custom image and use that to build the IBM Cloud HPC cluster through this offering.
      default: ""
    - name: compute_image_name_ubuntu
      description: Name of the custom image that you want to use to create virtual server instances in your IBM Cloud account to deploy the IBM Cloud HPC cluster dynamic compute nodes. By default, the solution uses a RHEL 8-6 OS image with additional software packages mentioned [here](https://cloud.ibm.com/docs/hpc-spectrum-LSF#create-custom-image). The solution also offers, Ubuntu 22-04 OS base image (hpcaas-lsf10-ubuntu2204-compute-v1). If you would like to include your application-specific binary files, follow the instructions in [ Planning for custom images ](https://cloud.ibm.com/docs/vpc?topic=vpc-planning-custom-images) to create your own custom image and use that to build the IBM Cloud HPC cluster through this offering.
      default: ""
    - name: login_image_name
      description: Name of the custom image that you want to use to create virtual server instances in your IBM Cloud account to deploy the IBM Cloud HPC cluster login node. By default, the solution uses a RHEL 8-6 OS image with additional software packages mentioned [here](https://cloud.ibm.com/docs/hpc-spectrum-LSF#create-custom-image). The solution also offers, Ubuntu 22-04 OS base image (hpcaas-lsf10-ubuntu2204-compute-v2). If you would like to include your application-specific binary files, follow the instructions in [ Planning for custom images ](https://cloud.ibm.com/docs/vpc?topic=vpc-planning-custom-images) to create your own custom image and use that to build the IBM Cloud HPC cluster through this offering.
      default: ""
    - name: cluster_id
      description: Ensure that you have received the cluster ID from IBM technical sales. A unique identifer for HPC cluster used by IBM Cloud HPC to differentiate different HPC clusters within the same reservation. This can be up to 39 alphanumeric characters including the underscore (_), the hyphen (-), and the period (.) characters. You cannot change the cluster ID after deployment.
      default: ""
    - name: reservation_id
      description: Ensure that you have received the reservation ID from IBM technical sales. Reservation ID is a unique identifier to distinguish different IBM Cloud HPC service agreements. It must start with a letter and can only contain letters, numbers, hyphens (-), or underscores (_).
      default: ""
  workspaces:
    - name: pipeline-ws
  tasks:
    - name: set-git-pr-pending
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context)
        - name: description
          value: $(params.description)
        - name: state
          value: "pending"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: git-clone
      taskRef:
        name: git-clone-repo
      runAfter: [set-git-pr-pending]
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: pr-repository
          value: $(params.pr-repository)
        - name: pr-branch
          value: $(params.pr-branch)
        - name: pr-revision
          value: $(params.pr-revision)
        - name: git-access-token
          value: $(params.git-access-token)
        - name: directory-name
          value: $(params.directory-name)
        - name: properties-file
          value: $(params.properties-file)
        - name: git-credentials-json-file
          value: $(params.git-credentials-json-file)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: output
          workspace: pipeline-ws
    - name: set-git-pr-running
      runAfter: [git-clone]
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context)
        - name: description
          value: $(params.description)
        - name: state
          value: "running"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: pre-requisites-install
      runAfter: [git-clone]
      taskRef:
        name: pre-requisites-install
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: ssh-key-creation
      runAfter: [git-clone, pre-requisites-install]
      taskRef:
        name: ssh-key-creation
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: resource_group
          value: $(params.resource_group)
    - name: wes-hpc-da-rhel-pr
      runAfter: [git-clone, pre-requisites-install, ssh-key-creation]
      taskRef:
        name: wes-hpc-da-rhel-pr
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: ssh_keys
          value: $(params.ssh_keys)
        - name: zones
          value: $(params.zones)
        - name: cluster_prefix
          value: $(params.cluster_prefix)
        - name: resource_group
          value: $(params.resource_group)
        - name: remote_allowed_ips
          value: $(params.remote_allowed_ips)
        - name: compute_image_name_rhel
          value: $(params.compute_image_name_rhel)
        - name: compute_image_name_ubuntu
          value: $(params.compute_image_name_ubuntu)
        - name: login_image_name
          value: $(params.login_image_name)
        - name: cluster_id
          value: $(params.cluster_id)
        - name: reservation_id
          value: $(params.reservation_id)
    - name: wes-hpc-da-ubuntu-pr
      runAfter: [git-clone, pre-requisites-install, ssh-key-creation]
      taskRef:
        name: wes-hpc-da-ubuntu-pr
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: ssh_keys
          value: $(params.ssh_keys)
        - name: zones
          value: $(params.zones)
        - name: cluster_prefix
          value: $(params.cluster_prefix)
        - name: resource_group
          value: $(params.resource_group)
        - name: remote_allowed_ips
          value: $(params.remote_allowed_ips)
        - name: compute_image_name_rhel
          value: $(params.compute_image_name_rhel)
        - name: compute_image_name_ubuntu
          value: $(params.compute_image_name_ubuntu)
        - name: login_image_name
          value: $(params.login_image_name)
        - name: cluster_id
          value: $(params.cluster_id)
        - name: reservation_id
          value: $(params.reservation_id)
    - name: ssh-key-deletion
      runAfter: [wes-hpc-da-rhel-pr, wes-hpc-da-ubuntu-pr]
      taskRef:
        name: ssh-key-deletion
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
    - name: inspect-wes-hpc-infra-log
      runAfter: [git-clone, set-git-pr-running, wes-hpc-da-rhel-pr, wes-hpc-da-ubuntu-pr]
      workspaces:
        - name: workspace
          workspace: pipeline-ws
      taskSpec:
        workspaces:
          - name: workspace
            description: The git repo will be cloned onto the volume backing this workspace
            mountPath: /artifacts
        steps:
          - name: inspect-infra-error-rhel-pr
            image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:latest
            workingDir: "/artifacts"
            command: ["/bin/bash", "-c"]
            args:
              - |
                #!/bin/bash
                pwd
                LOG_FILE="pipeline-TestRunBasic-rhel*"
                DIRECTORY="/artifacts/tests"
                if [ -d "$DIRECTORY" ]; then
                  # Check any error message on the plan/apply log
                  error_check=$(eval "grep -E -w 'FAIL|Error|ERROR' $DIRECTORY/$LOG_FILE")
                  if [[ "$error_check" ]]; then
                    echo "$error_check"
                    echo "Found Error/FAIL/ERROR in plan/apply log. Please check log."
                    exit 1
                  else
                    count=`ls -1 $DIRECTORY/test_output/log* 2>/dev/null | wc -l`
                    if [ $count == 0 ]; then
                    echo "Test Suite have not initated and log file not created, check with packages or binaries installation"
                    exit 1
                    else
                      echo "*******************************************************""
                      cat $DIRECTORY/test_output/log*
                      echo "*******************************************************""
                      echo "No Error Found, infra got SUCCESS"
                    fi
                  fi
                else
                  echo "$DIRECTORY does not exits"
                  exit 1
                fi
                count=`ls -1 $DIRECTORY/*.cicd 2>/dev/null | wc -l`
                if [ $count == 0 ]; then
                  echo "Test Suite have not initated, check with packages or binaries installation"
                  exit 1
                fi
          - name: inspect-infra-error-ubuntu-pr
            image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:latest
            workingDir: "/artifacts"
            command: ["/bin/bash", "-c"]
            args:
              - |
                #!/bin/bash
                pwd
                LOG_FILE="pipeline-TestRunBasic-ubuntu*"
                DIRECTORY="/artifacts/tests"
                if [ -d "$DIRECTORY" ]; then
                  # Check any error message on the plan/apply log
                  error_check=$(eval "grep -E -w 'FAIL|Error|ERROR' $DIRECTORY/$LOG_FILE")
                  if [[ "$error_check" ]]; then
                    echo "$error_check"
                    echo "Found Error/FAIL/ERROR in plan/apply log. Please check log."
                    exit 1
                  else
                    count=`ls -1 $DIRECTORY/test_output/log* 2>/dev/null | wc -l`
                    if [ $count == 0 ]; then
                    echo "Test Suite have not initated and log file not created, check with packages or binaries installation"
                    exit 1
                    else
                      echo "*******************************************************""
                      cat $DIRECTORY/test_output/log*
                      echo "*******************************************************""
                      echo "No Error Found, infra got SUCCESS"
                    fi
                  fi
                else
                  echo "$DIRECTORY does not exits"
                  exit 1
                fi
                count=`ls -1 $DIRECTORY/*.cicd 2>/dev/null | wc -l`
                if [ $count == 0 ]; then
                  echo "Test Suite have not initated, check with packages or binaries installation"
                  exit 1
                fi
  finally:
    - name: set-git-commit-status
      taskRef:
        name: git-set-commit-status
      workspaces:
        - name: artifacts
          workspace: pipeline-ws
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.pr-revision)
        - name: context
          value: $(params.context)
        - name: description
          value: $(params.description)
        - name: state
          value: "$(tasks.inspect-wes-hpc-infra-log.status)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
