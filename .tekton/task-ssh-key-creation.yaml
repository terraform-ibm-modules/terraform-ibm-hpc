---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ssh-key-creation
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the secret containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: ibmcloud_api_key
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: resource_group
      description: Resource group name from your IBM Cloud account where the VPC resources should be deployed. Note. If the resource group value is set as null, automation creates two different RG with the name (workload-rg and service-rg). For additional information on resource groups, see [Managing resource groups](https://cloud.ibm.com/docs/account?topic=account-rgs).
      default: Default
  workspaces:
    - name: workspace
      mountPath: /artifacts
  stepTemplate:
    env:
      - name: API_KEY
        valueFrom:
          secretKeyRef:
            name: $(params.continuous-delivery-context-secret)
            key: $(params.ibmcloud-apikey-secret-key)
            optional: true
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
  steps:
    - name: ssh-key-creation
      onError: continue
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:latest
      env:
        - name: resource_group
          value: $(params.resource_group)
      workingDir: "/artifacts"
      imagePullPolicy: Always
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [[ "${PIPELINE_DEBUG}" == "true" ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          ibmcloud version

          mkdir /artifacts/.ssh
          ssh_key_pair=$(eval "ssh-keygen -t rsa -N '' -f /artifacts/.ssh/id_rsa <<< y")

          ibmcloud_login () {
            local regions=("$1")
            local API_KEY=("$2")
            local for_create_or_delete="$3"
            CICD_SSH_KEY="cicd-toolchain"
            # Looping all region to create SSH-KEYS
            for region in ${regions[@]};
              do
                disable_update_check=$(eval "ibmcloud config --check-version=false")
                auhtenticate=$(eval "ibmcloud login --apikey $API_KEY -r $region")
                echo "$auhtenticate"
                if [[ $auhtenticate = *OK* ]]; then
                  echo "************SSH-KEY create progress in $region ************"
                  if echo $for_create_or_delete | grep -q "create"; then
                    check_key=`ibmcloud is keys | grep "cicd-toolchain" | awk '{print $2}'`
                    if [[ -z "$check_key" ]]; then
                      echo "$CICD_SSH_KEY creating in $region"
                      ssh_key_create=$(eval "ibmcloud is key-create $CICD_SSH_KEY @/artifacts/.ssh/id_rsa.pub  --resource-group-name $resource_group")
                      if [[ $ssh_key_create = *Created* ]]; then
                        echo "$CICD_SSH_KEY created in $region"
                      else
                        echo "ssh-key creation failed in $region"
                        exit 1
                      fi
                    else
                      echo "$CICD_SSH_KEY already exists in region $region. So, deleting exist key $CICD_SSH_KEY in region $region"
                      ssh_key_delete=$(eval "ibmcloud is key-delete $CICD_SSH_KEY -f")
                      if [[ $ssh_key_delete = *deleted* ]]; then
                        echo "Exist $CICD_SSH_KEY deleted in $region"
                        echo "New $CICD_SSH_KEY creating in $region"
                        ssh_key_create=$(eval "ibmcloud is key-create $CICD_SSH_KEY @/artifacts/.ssh/id_rsa.pub  --resource-group-name $resource_group")
                        if [[ $ssh_key_create = *Created* ]]; then
                          echo "New $CICD_SSH_KEY created in $region"
                        else
                          echo "ssh-key creation failed in $region"
                          exit 1
                        fi
                      else
                        echo "ssh-key deletion failed in $region"
                      fi
                    fi
                    echo "************SSH-KEY create progress in $region done ************"
                  fi
                else
                  echo "Issue Login with IBMCLOUD $auhtenticate"
                  exit 1
                fi
              done
                  }

          regions="us-south eu-de us-east"
          ibmcloud_login "${regions}" "${API_KEY}" "create"
